const { 
    SlashCommandBuilder, 
    EmbedBuilder, 
    ActionRowBuilder, 
    ButtonBuilder, 
    ButtonStyle,
    ModalBuilder,
    TextInputBuilder,
    TextInputStyle 
} = require('discord.js');
const fs = require('fs');
const path = require('path');

// Chemin vers le fichier de configuration des √©v√©nements
const EVENTS_CONFIG_PATH = path.join(__dirname, '..', '..', 'events-config.json');

/**
 * ==========================================
 * COMMANDE EVENT-EDIT - Modification d'√©v√©nements
 * ==========================================
 * 
 * Fonction : Permet de modifier un √©v√©nement existant
 * 
 * Fonctionnalit√©s :
 * - Modification du titre, description, date/heure
 * - Changement de la limite de participants
 * - Modification de la r√©currence
 * - V√©rification des permissions (cr√©ateur ou admin)
 * - Notification automatique des participants des changements
 * - Mise √† jour de l'√©v√©nement Discord natif
 * 
 * Param√®tres :
 * - event-id : ID de l'√©v√©nement √† modifier (requis)
 * - titre : Nouveau titre (optionnel)
 * - description : Nouvelle description (optionnel)
 * - date : Nouvelle date DD/MM/YYYY (optionnel)
 * - heure : Nouvelle heure HH:MM (optionnel)
 * - limite : Nouvelle limite de participants (optionnel)
 * 
 * Usage : /event-edit event-id:"abc123" titre:"Nouveau titre" date:"26/10/2025"
 */
module.exports = {
    data: new SlashCommandBuilder()
        .setName('event-edit')
        .setDescription('Modifie un √©v√©nement existant')
        .addStringOption(option =>
            option
                .setName('event-id')
                .setDescription('ID de l\'√©v√©nement √† modifier')
                .setRequired(true)
        )
        .addStringOption(option =>
            option
                .setName('titre')
                .setDescription('Nouveau titre de l\'√©v√©nement')
                .setMaxLength(100)
                .setRequired(false)
        )
        .addStringOption(option =>
            option
                .setName('description')
                .setDescription('Nouvelle description de l\'√©v√©nement')
                .setMaxLength(1000)
                .setRequired(false)
        )
        .addStringOption(option =>
            option
                .setName('date')
                .setDescription('Nouvelle date (format: DD/MM/YYYY)')
                .setRequired(false)
        )
        .addStringOption(option =>
            option
                .setName('heure')
                .setDescription('Nouvelle heure (format: HH:MM)')
                .setRequired(false)
        )
        .addIntegerOption(option =>
            option
                .setName('limite')
                .setDescription('Nouvelle limite de participants')
                .setMinValue(1)
                .setMaxValue(100)
                .setRequired(false)
        )
        .addStringOption(option =>
            option
                .setName('recurrence')
                .setDescription('Nouveau type de r√©currence')
                .addChoices(
                    { name: 'Aucune', value: 'none' },
                    { name: 'Hebdomadaire', value: 'weekly' },
                    { name: 'Mensuelle', value: 'monthly' }
                )
                .setRequired(false)
        ),
    emoji: '‚úèÔ∏è',

    async execute(interaction) {
        const eventId = interaction.options.getString('event-id');
        const newTitle = interaction.options.getString('titre');
        const newDescription = interaction.options.getString('description');
        const newDate = interaction.options.getString('date');
        const newTime = interaction.options.getString('heure');
        const newLimit = interaction.options.getInteger('limite');
        const newRecurrence = interaction.options.getString('recurrence');

        await interaction.deferReply();

        try {
            // Charger la configuration des √©v√©nements
            const eventsConfig = loadEventsConfig();
            const event = eventsConfig.events[interaction.guildId]?.[eventId];

            if (!event) {
                return await interaction.editReply({
                    content: '‚ùå Aucun √©v√©nement trouv√© avec cet ID. Utilisez `/event-list` pour voir les √©v√©nements disponibles.'
                });
            }

            // V√©rifier les permissions
            const isCreator = event.creatorId === interaction.user.id;
            const isAdmin = interaction.member.permissions.has('Administrator');
            const canManageEvents = interaction.member.permissions.has('ManageEvents');

            if (!isCreator && !isAdmin && !canManageEvents) {
                return await interaction.editReply({
                    content: '‚ùå Vous ne pouvez modifier que vos propres √©v√©nements, ou vous devez avoir les permissions d\'administrateur/gestion d\'√©v√©nements.'
                });
            }

            // V√©rifier qu'au moins un param√®tre √† modifier a √©t√© fourni
            if (!newTitle && !newDescription && !newDate && !newTime && !newLimit && !newRecurrence) {
                return await interaction.editReply({
                    content: '‚ùå Vous devez sp√©cifier au moins un √©l√©ment √† modifier (titre, description, date, heure, limite ou r√©currence).'
                });
            }

            // Sauvegarder les anciennes valeurs pour comparaison
            const oldEvent = { ...event };
            const changes = [];

            // Appliquer les modifications
            if (newTitle) {
                event.title = newTitle;
                changes.push(`**Titre:** ${oldEvent.title} ‚Üí ${newTitle}`);
            }

            if (newDescription) {
                event.description = newDescription;
                changes.push(`**Description:** Modifi√©e`);
            }

            if (newDate || newTime) {
                const dateStr = newDate || formatDateFromISO(event.dateTime);
                const timeStr = newTime || formatTimeFromISO(event.dateTime);
                
                const newDateTime = parseDateTime(dateStr, timeStr);
                if (!newDateTime) {
                    return await interaction.editReply({
                        content: '‚ùå Format de date/heure invalide. Utilisez DD/MM/YYYY pour la date et HH:MM pour l\'heure.'
                    });
                }

                // V√©rifier que la nouvelle date est dans le futur
                if (newDateTime <= new Date()) {
                    return await interaction.editReply({
                        content: '‚ùå La nouvelle date de l\'√©v√©nement doit √™tre dans le futur.'
                    });
                }

                const oldDateTime = new Date(event.dateTime);
                event.dateTime = newDateTime.toISOString();
                changes.push(`**Date:** <t:${Math.floor(oldDateTime.getTime() / 1000)}:F> ‚Üí <t:${Math.floor(newDateTime.getTime() / 1000)}:F>`);
            }

            if (newLimit !== null) {
                // V√©rifier que la nouvelle limite n'est pas inf√©rieure au nombre actuel de participants
                const currentParticipants = event.participants.attending.length;
                if (newLimit < currentParticipants) {
                    return await interaction.editReply({
                        content: `‚ùå La nouvelle limite (${newLimit}) ne peut pas √™tre inf√©rieure au nombre actuel de participants (${currentParticipants}).`
                    });
                }

                changes.push(`**Limite de participants:** ${event.maxParticipants} ‚Üí ${newLimit}`);
                event.maxParticipants = newLimit;
            }

            if (newRecurrence) {
                const oldRecurrenceLabel = getRecurrenceLabel(event.recurrence);
                const newRecurrenceLabel = getRecurrenceLabel(newRecurrence);
                event.recurrence = newRecurrence;
                changes.push(`**R√©currence:** ${oldRecurrenceLabel} ‚Üí ${newRecurrenceLabel}`);
            }

            // Sauvegarder les modifications
            eventsConfig.events[interaction.guildId][eventId] = event;
            saveEventsConfig(eventsConfig);

            // Mettre √† jour le message d'√©v√©nement
            await updateEventMessage(interaction, event);

            // Mettre √† jour l'√©v√©nement Discord natif si il existe
            if (event.discordEventId) {
                await updateDiscordEvent(interaction, event);
            }

            // Mettre √† jour les rappels si la date a chang√©
            if (newDate || newTime) {
                if (interaction.client.reminderSystem) {
                    interaction.client.reminderSystem.updateReminders(event);
                }
            }

            // Notifier les participants des changements importants
            if (newDate || newTime || newTitle) {
                await notifyParticipantsOfChanges(interaction, event, changes);
            }

            // Cr√©er l'embed de confirmation
            const successEmbed = new EmbedBuilder()
                .setColor(0x00ff00)
                .setTitle('‚úÖ √âv√©nement modifi√©')
                .setDescription(`L'√©v√©nement **${event.title}** a √©t√© modifi√© avec succ√®s.`)
                .addFields({
                    name: 'üìù Modifications apport√©es',
                    value: changes.join('\n'),
                    inline: false
                })
                .setFooter({ 
                    text: `ID: ${eventId} ‚Ä¢ Modifi√© par ${interaction.user.tag}`,
                    iconURL: interaction.client.user.displayAvatarURL()
                })
                .setTimestamp();

            await interaction.editReply({ embeds: [successEmbed] });

            console.log(`√âv√©nement modifi√©: ${event.title} (${eventId}) par ${interaction.user.tag}`);

        } catch (error) {
            console.error('Erreur lors de la modification de l\'√©v√©nement:', error);
            await interaction.editReply({
                content: '‚ùå Une erreur est survenue lors de la modification de l\'√©v√©nement.'
            });
        }
    }
};

/**
 * Met √† jour le message d'√©v√©nement avec les nouvelles donn√©es
 */
async function updateEventMessage(interaction, event) {
    try {
        const channel = await interaction.client.channels.fetch(event.channelId);
        const message = await channel.messages.fetch(event.messageId);
        
        const updatedEmbed = createEventEmbed(event, interaction.client);
        const rsvpButtons = createRSVPButtons(event.id);
        
        await message.edit({
            embeds: [updatedEmbed],
            components: [rsvpButtons]
        });
    } catch (error) {
        console.error('Erreur lors de la mise √† jour du message d\'√©v√©nement:', error);
    }
}

/**
 * Met √† jour l'√©v√©nement Discord natif
 */
async function updateDiscordEvent(interaction, event) {
    try {
        const discordEvent = await interaction.guild.scheduledEvents.fetch(event.discordEventId);
        
        await discordEvent.edit({
            name: event.title,
            description: event.description,
            scheduledStartTime: new Date(event.dateTime)
        });
    } catch (error) {
        console.log('Impossible de mettre √† jour l\'√©v√©nement Discord natif:', error.message);
    }
}

/**
 * Notifie les participants des changements importants
 */
async function notifyParticipantsOfChanges(interaction, event, changes) {
    const participantsToNotify = [
        ...event.participants.attending,
        ...event.participants.maybe
    ];

    if (participantsToNotify.length === 0) return;

    const notificationEmbed = new EmbedBuilder()
        .setColor(0xffa500)
        .setTitle('üìÖ √âv√©nement modifi√©')
        .setDescription(`L'√©v√©nement **${event.title}** auquel vous √™tes inscrit a √©t√© modifi√©.`)
        .addFields(
            {
                name: 'üìù Modifications',
                value: changes.join('\n'),
                inline: false
            },
            {
                name: 'üìÖ Nouvelle date',
                value: `<t:${Math.floor(new Date(event.dateTime).getTime() / 1000)}:F>`,
                inline: true
            },
            {
                name: 'üë§ Modifi√© par',
                value: `${interaction.user.tag}`,
                inline: true
            }
        )
        .setFooter({ 
            text: 'Notification automatique du bot √©v√©nements',
            iconURL: interaction.client.user.displayAvatarURL()
        })
        .setTimestamp();

    // Envoyer les notifications en parall√®le (max 5 √† la fois)
    const chunks = [];
    for (let i = 0; i < participantsToNotify.length; i += 5) {
        chunks.push(participantsToNotify.slice(i, i + 5));
    }

    for (const chunk of chunks) {
        const promises = chunk.map(async (userId) => {
            try {
                const user = await interaction.client.users.fetch(userId);
                await user.send({ embeds: [notificationEmbed] });
            } catch (error) {
                console.log(`Impossible de notifier l'utilisateur ${userId}:`, error.message);
            }
        });

        await Promise.all(promises);
        
        if (chunks.indexOf(chunk) < chunks.length - 1) {
            await new Promise(resolve => setTimeout(resolve, 1000));
        }
    }
}

// Fonctions utilitaires

function parseDateTime(dateStr, timeStr) {
    try {
        const [day, month, year] = dateStr.split('/').map(Number);
        const [hours, minutes] = timeStr.split(':').map(Number);
        
        if (!day || !month || !year || hours === undefined || minutes === undefined) {
            return null;
        }
        
        const date = new Date(year, month - 1, day, hours, minutes);
        
        if (date.getDate() !== day || date.getMonth() !== month - 1 || date.getFullYear() !== year) {
            return null;
        }
        
        return date;
    } catch (error) {
        return null;
    }
}

function formatDateFromISO(isoString) {
    const date = new Date(isoString);
    const day = date.getDate().toString().padStart(2, '0');
    const month = (date.getMonth() + 1).toString().padStart(2, '0');
    const year = date.getFullYear();
    return `${day}/${month}/${year}`;
}

function formatTimeFromISO(isoString) {
    const date = new Date(isoString);
    const hours = date.getHours().toString().padStart(2, '0');
    const minutes = date.getMinutes().toString().padStart(2, '0');
    return `${hours}:${minutes}`;
}

function loadEventsConfig() {
    try {
        if (fs.existsSync(EVENTS_CONFIG_PATH)) {
            const data = fs.readFileSync(EVENTS_CONFIG_PATH, 'utf8');
            return JSON.parse(data);
        }
    } catch (error) {
        console.error('Erreur lors du chargement de la config √©v√©nements:', error);
    }
    
    return {
        events: {},
        reminders: {},
        settings: {
            defaultReminderTimes: [],
            maxEventsPerGuild: 50,
            maxParticipantsPerEvent: 100
        }
    };
}

function saveEventsConfig(config) {
    try {
        fs.writeFileSync(EVENTS_CONFIG_PATH, JSON.stringify(config, null, 2));
    } catch (error) {
        console.error('Erreur lors de la sauvegarde de la config √©v√©nements:', error);
    }
}

function createEventEmbed(eventData, client) {
    const eventDate = new Date(eventData.dateTime);
    const timestamp = Math.floor(eventDate.getTime() / 1000);
    const isUpcoming = eventDate > new Date();
    
    const embed = new EmbedBuilder()
        .setColor(isUpcoming ? 0x5865f2 : 0x747f8d)
        .setTitle(`üìÖ ${eventData.title}`)
        .setDescription(eventData.description)
        .addFields(
            { 
                name: 'üìÖ Date et heure', 
                value: `<t:${timestamp}:F>\n<t:${timestamp}:R>`, 
                inline: false 
            },
            { 
                name: '‚úÖ Participants', 
                value: `${eventData.participants.attending.length}/${eventData.maxParticipants}`, 
                inline: true 
            },
            { 
                name: '‚ùì Peut-√™tre', 
                value: `${eventData.participants.maybe.length}`, 
                inline: true 
            },
            { 
                name: '‚ùå Absents', 
                value: `${eventData.participants.notAttending.length}`, 
                inline: true 
            }
        )
        .setFooter({ 
            text: `ID: ${eventData.id} ‚Ä¢ Cr√©√© par ${client.users.cache.get(eventData.creatorId)?.tag || 'Utilisateur inconnu'}`,
            iconURL: client.user.displayAvatarURL()
        })
        .setTimestamp();

    if (eventData.recurrence !== 'none') {
        embed.addFields({
            name: 'üîÑ R√©currence',
            value: getRecurrenceLabel(eventData.recurrence),
            inline: true
        });
    }

    if (!isUpcoming) {
        embed.setTitle(`üìÖ ${eventData.title} (Termin√©)`);
    }

    return embed;
}

function createRSVPButtons(eventId) {
    return new ActionRowBuilder()
        .addComponents(
            new ButtonBuilder()
                .setCustomId(`event_attend_${eventId}`)
                .setLabel('‚úÖ Je participe')
                .setStyle(ButtonStyle.Success),
            new ButtonBuilder()
                .setCustomId(`event_maybe_${eventId}`)
                .setLabel('‚ùì Peut-√™tre')
                .setStyle(ButtonStyle.Secondary),
            new ButtonBuilder()
                .setCustomId(`event_decline_${eventId}`)
                .setLabel('‚ùå Je ne peux pas')
                .setStyle(ButtonStyle.Danger),
            new ButtonBuilder()
                .setCustomId(`event_info_${eventId}`)
                .setLabel('‚ÑπÔ∏è D√©tails')
                .setStyle(ButtonStyle.Primary)
        );
}

function getRecurrenceLabel(recurrence) {
    switch (recurrence) {
        case 'weekly': return 'üîÑ Hebdomadaire';
        case 'monthly': return 'üîÑ Mensuelle';
        default: return '‚û°Ô∏è Unique';
    }
}
